// Copyright (c) 2019 Tesla, Inc.
//
// Licensed under the Apache License, Version 2.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an AS IS BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Michael Tesla (michaeltesla1995@gmail.com)
// Date: Tue Feb  5 16:59:45 CST 2019

#ifndef TESLA_TUTIL_THREAD_LOCAL_H_
#define TESLA_TUTIL_THREAD_LOCAL_H_

namespace tutil {

// Get a thread-local object typed T. The object will be default-constructed
// at the first call to this function, and will be deleted when thread exits.
template<typename T>
inline T* GetThreadLocal();

// |fn| or |fn(arg)| will be called at caller's exit. If caller is not a thread,
// fn will be called at program termination. Calling sequence is LIFO: last
// registered function will be called first. Duplication of functinos are not
// checked. This function is often used for releasing thread-local resources
// declared with __thread which is much faster than pthread_getspecific or
// boost::thread_specific_ptr.
// Return 0 on success, -1 otherwise and errno is set.
int ThreadAtExit(void (*fn)());
int ThreadAtExit(void (*fn)(), void* arg);

// Remove registered function, matched functions will not be called.
int ThreadAtExitCancel(void (*fn)());
int ThreadAtExitCancel(void (*fn)(), void* arg);

// Delete the typed-T object whose address is `arg'. This is a common function
// to thread_atexit.
template<typename T>
void DeleteObject(void* arg) {
  delete static_cast<T*>(arg);
}

} // namespace tutil

#endif // TESLA_TUTIL_THREAD_LOCAL_H_
